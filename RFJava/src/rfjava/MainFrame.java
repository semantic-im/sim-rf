/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 31.05.2011, 11:15:35
 */

package rfjava;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ionel
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {
        rf = new RFClusteringRegression();
        kr = new KernelRegression();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jbuttonGroup = new javax.swing.ButtonGroup();
        jTabbedPane = new javax.swing.JTabbedPane();
        jLoadPanel = new javax.swing.JPanel();
        jButtonChooseDataSource = new javax.swing.JButton();
        jTextDataPath = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListAttributes = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextNbInstances = new javax.swing.JTextField();
        jTextNbFeatures = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableFeatureValues = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jTextMean = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextStdDev = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextMin = new javax.swing.JTextField();
        jTextMax = new javax.swing.JTextField();
        jMachineLearningPanel = new javax.swing.JPanel();
        jCheckClusteringRegression = new javax.swing.JCheckBox();
        jCheckKCCA = new javax.swing.JCheckBox();
        jButtonBuildPredictionModel = new javax.swing.JButton();
        jButtonSaveModel = new javax.swing.JButton();
        jCheckKernelRegression = new javax.swing.JCheckBox();
        jCheckBoxBestConfiguration = new javax.swing.JCheckBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextStatus = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jResultsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextQuery = new javax.swing.JTextArea();
        jButtonPredict = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextResults = new javax.swing.JTextArea();
        jButtonLoadModel = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextStatusLoadModel = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextWorkflow = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();

        jbuttonGroup.add(jCheckClusteringRegression);
        jbuttonGroup.add(jCheckKernelRegression);
        jbuttonGroup.add(jCheckKCCA);
        jbuttonGroup.add(jCheckBoxBestConfiguration);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("Relevance Feedback"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        jButtonChooseDataSource.setText("Choose Data Source");
        jButtonChooseDataSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseDataSourceActionPerformed(evt);
            }
        });

        jTextDataPath.setEditable(false);

        jListAttributes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListAttributes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAttributes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListAttributesValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListAttributes);

        jLabel4.setText("Features:");

        jLabel5.setText("Nb instances loaded:");

        jLabel6.setText("Nb features for each instance:");

        jTextNbInstances.setEditable(false);

        jTextNbFeatures.setEditable(false);

        jTableFeatureValues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Instance No.", "Feature Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFeatureValues.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableFeatureValues.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableFeatureValues.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTableFeatureValues);
        jTableFeatureValues.getColumnModel().getColumn(0).setMaxWidth(100);
        jTableFeatureValues.getColumnModel().getColumn(1).setMinWidth(400);

        jLabel7.setText("Mean:");

        jTextMean.setEditable(false);

        jLabel8.setText("Std. deviation:");

        jTextStdDev.setEditable(false);

        jLabel9.setText("Minimum:");

        jLabel10.setText("Maximum:");

        jTextMin.setEditable(false);

        jTextMax.setEditable(false);

        javax.swing.GroupLayout jLoadPanelLayout = new javax.swing.GroupLayout(jLoadPanel);
        jLoadPanel.setLayout(jLoadPanelLayout);
        jLoadPanelLayout.setHorizontalGroup(
            jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoadPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jTextNbFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextNbInstances, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jButtonChooseDataSource)
                        .addGap(18, 18, 18)
                        .addComponent(jTextDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLoadPanelLayout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7))
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextMin, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextMean)))
                                .addGap(41, 41, 41)
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(41, 41, 41)
                                        .addComponent(jTextMax, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextStdDev))))
                            .addGroup(jLoadPanelLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jLoadPanelLayout.setVerticalGroup(
            jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoadPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonChooseDataSource)
                    .addComponent(jTextDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextNbInstances, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextNbFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLoadPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jLoadPanelLayout.createSequentialGroup()
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextMin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jTextMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jLoadPanelLayout.createSequentialGroup()
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jTextMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(jTextStdDev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Load", jLoadPanel);

        jCheckClusteringRegression.setText("Clustering and Regression (Scalability&Bottleneck prediction)");
        jCheckClusteringRegression.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckClusteringRegressionItemStateChanged(evt);
            }
        });

        jCheckKCCA.setText("KCCA (Scalability&Bottleneck prediction)");

        jButtonBuildPredictionModel.setText("Build prediction model");
        jButtonBuildPredictionModel.setEnabled(jCheckClusteringRegression.isSelected());
        jButtonBuildPredictionModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuildPredictionModelActionPerformed(evt);
            }
        });

        jButtonSaveModel.setText("Save model");
        jButtonSaveModel.setEnabled(rf.isTrained);
        jButtonSaveModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveModelActionPerformed(evt);
            }
        });

        jCheckKernelRegression.setText("Kernel Regression  (Scalability&Bottleneck prediction)");
        jCheckKernelRegression.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckKernelRegressionItemStateChanged(evt);
            }
        });

        jCheckBoxBestConfiguration.setText("Best Configuration (Workflow prediction)");
        jCheckBoxBestConfiguration.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxBestConfigurationItemStateChanged(evt);
            }
        });

        jTextStatus.setBackground(new java.awt.Color(240, 240, 240));
        jTextStatus.setColumns(20);
        jTextStatus.setEditable(false);
        jTextStatus.setLineWrap(true);
        jTextStatus.setRows(5);
        jScrollPane6.setViewportView(jTextStatus);

        jLabel12.setText("Status:");

        javax.swing.GroupLayout jMachineLearningPanelLayout = new javax.swing.GroupLayout(jMachineLearningPanel);
        jMachineLearningPanel.setLayout(jMachineLearningPanelLayout);
        jMachineLearningPanelLayout.setHorizontalGroup(
            jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckKernelRegression)
                            .addComponent(jCheckBoxBestConfiguration)
                            .addComponent(jCheckKCCA)
                            .addComponent(jCheckClusteringRegression))
                        .addGap(271, 271, 271))
                    .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addGroup(jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonBuildPredictionModel, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jButtonSaveModel))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                            .addComponent(jLabel12))))
                .addContainerGap(257, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jMachineLearningPanelLayout.setVerticalGroup(
            jMachineLearningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMachineLearningPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jCheckClusteringRegression)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckKernelRegression)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxBestConfiguration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckKCCA)
                .addGap(47, 47, 47)
                .addComponent(jButtonBuildPredictionModel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSaveModel)
                .addGap(19, 19, 19)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(311, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Machine Learning", jMachineLearningPanel);

        jLabel3.setText("Query");

        jTextQuery.setColumns(20);
        jTextQuery.setRows(5);
        jTextQuery.setLineWrap(true);
        jScrollPane1.setViewportView(jTextQuery);

        jButtonPredict.setText("Predict");
        jButtonPredict.setEnabled(rf.isTrained);
        jButtonPredict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPredictActionPerformed(evt);
            }
        });

        jTextResults.setColumns(20);
        jTextResults.setRows(5);
        jScrollPane2.setViewportView(jTextResults);

        jButtonLoadModel.setText("Load prediction model");
        jButtonLoadModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadModelActionPerformed(evt);
            }
        });

        jTextStatusLoadModel.setBackground(new java.awt.Color(240, 240, 240));
        jTextStatusLoadModel.setColumns(20);
        jTextStatusLoadModel.setEditable(false);
        jTextStatusLoadModel.setLineWrap(true);
        jTextStatusLoadModel.setRows(5);
        jScrollPane5.setViewportView(jTextStatusLoadModel);

        jLabel11.setText("Status:");

        jTextWorkflow.setColumns(20);
        jTextWorkflow.setRows(5);
        jTextQuery.setLineWrap(true);
        jScrollPane7.setViewportView(jTextWorkflow);

        jLabel13.setText("Workflow");

        javax.swing.GroupLayout jResultsPanelLayout = new javax.swing.GroupLayout(jResultsPanel);
        jResultsPanel.setLayout(jResultsPanelLayout);
        jResultsPanelLayout.setHorizontalGroup(
            jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jResultsPanelLayout.createSequentialGroup()
                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE))))
                .addGap(36, 36, 36)
                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jResultsPanelLayout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(jButtonLoadModel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 341, Short.MAX_VALUE)
                .addComponent(jButtonPredict)
                .addGap(198, 198, 198))
        );
        jResultsPanelLayout.setVerticalGroup(
            jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jResultsPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jResultsPanelLayout.createSequentialGroup()
                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(jResultsPanelLayout.createSequentialGroup()
                                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonLoadModel)
                                    .addComponent(jButtonPredict))))
                        .addGap(39, 39, 39)
                        .addGroup(jResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jResultsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Test", jResultsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 893, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadModelActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("model"));
        int returnVal = fc.showOpenDialog(MainFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName=fc.getSelectedFile().getAbsolutePath();

            jTextStatusLoadModel.setText("Loading model . . .");

            boolean succesLoad=false;

            if (!succesLoad) {
                try{
                    RFClusteringRegression loadedModel=RFClusteringRegression.loadModel(fileName);
                    rf=loadedModel;
                    if (rf!=null) {
                        jTextStatusLoadModel.setText("Loading clustering&regression model successfully!");
                        jButtonPredict.setEnabled(rf.isTrained);
                        jCheckClusteringRegression.setSelected(rf.isTrained);
                        succesLoad=true;
                    }
                }catch (Exception e) {
                }
            }

            if (!succesLoad) {
                try{
                    BestConfigurator loadedModel=BestConfigurator.loadModel(fileName);
                    bf=loadedModel;
                    if (bf!=null) {
                        jTextStatusLoadModel.setText("Loading best-configuration model successfully!");
                        jButtonPredict.setEnabled(bf.isTrained);
                        jCheckBoxBestConfiguration.setSelected(bf.isTrained);
                        succesLoad=true;
                    }
                }catch (Exception e) {
                }
            }

            if (!succesLoad) {
                try{
                    KernelRegression loadedModel=KernelRegression.loadModel(fileName);
                    kr=loadedModel;
                    if (kr!=null) {
                        jTextStatusLoadModel.setText("Loading kernel-regression model successfully!");
                        jButtonPredict.setEnabled(kr.isTrained);
                        jCheckKernelRegression.setSelected(kr.isTrained);
                        succesLoad=true;
                    }
                }catch (Exception e) {
                }
            }

            if (!succesLoad) {
                JOptionPane.showMessageDialog(this,"Unable to load model!","Loading model error...",JOptionPane.ERROR_MESSAGE);
                jTextStatusLoadModel.setText("Loading failed!");
                jButtonPredict.setEnabled(false);
            }
        }
}//GEN-LAST:event_jButtonLoadModelActionPerformed

    private void jButtonPredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPredictActionPerformed
        if (rf!=null && jCheckClusteringRegression.isSelected()) {
            String query=jTextQuery.getText();
            String result=rf.predictAttrForQuery(query);
            jTextResults.setText(result);
        }

        if (bf!=null && jCheckBoxBestConfiguration.isSelected()) {
            String query=jTextQuery.getText();
            String result=bf.predictQuery(query,"1-4, 13-40");
            jTextResults.setText(result);
        }

        if (kr!=null && jCheckKernelRegression.isSelected()) {
            String query=jTextQuery.getText();
            String result=kr.predictTestQuery(query);
            jTextResults.setText(result);
        }
    }//GEN-LAST:event_jButtonPredictActionPerformed

    private void jCheckBoxBestConfigurationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxBestConfigurationItemStateChanged
        jButtonBuildPredictionModel.setEnabled(jCheckBoxBestConfiguration.isSelected());
}//GEN-LAST:event_jCheckBoxBestConfigurationItemStateChanged

    private void jCheckKernelRegressionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckKernelRegressionItemStateChanged
        jButtonBuildPredictionModel.setEnabled(jCheckKernelRegression.isSelected());
}//GEN-LAST:event_jCheckKernelRegressionItemStateChanged

    private void jButtonSaveModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveModelActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("model"));
        int returnVal = fc.showSaveDialog(MainFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName=fc.getSelectedFile().getAbsolutePath()+".model";
            jTextStatus.setText("Saving . . .");

            if (jCheckClusteringRegression.isSelected())
                rf.saveModel(fileName);
            else
                if (jCheckBoxBestConfiguration.isSelected())
                    bf.saveModel(fileName);
                else
                    if (jCheckKernelRegression.isSelected())
                        kr.saveModel(fileName);


            jTextStatus.setText("DONE Saving!");
        }
}//GEN-LAST:event_jButtonSaveModelActionPerformed

    private void jButtonBuildPredictionModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuildPredictionModelActionPerformed
        // TODO add your handling code here:
        if (dp==null) {
            JOptionPane.showMessageDialog(this,"First please load a ARFF file for training!","No input data...",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (jCheckClusteringRegression.isSelected()) {
            System.out.println("Training Clustering&Regression");
            jTextStatus.setText("Building . . .");
            rf.isTrained=false;
            try{
                rf.setDataPreprocessor(dp);
                rf.initClusteringPrediction();
                jTextStatus.setText("DONE Building!");
                rf.isTrained=true;
                jTextStatusLoadModel.setText("Clustering-regression model is loaded!");
            }catch (Exception e) {
                JOptionPane.showMessageDialog(this,"Unable to build model!","Bad input data...",JOptionPane.ERROR_MESSAGE);
                jTextStatus.setText("Build failed!");
            }
            jButtonPredict.setEnabled(rf.isTrained);
            jButtonSaveModel.setEnabled(rf.isTrained);
        }

        if (jCheckKernelRegression.isSelected()) {
            System.out.println("Training KernelRegression");
            jTextStatus.setText("Building . . .");
            kr.isTrained=false;
            int [] trainingFeatures= new int[] {3,6,7,8,9,10,11};
            int classFeature=13;
            try{
                kr.setDataPreprocessor(dp);
                kr.initPredictionModel(trainingFeatures, classFeature);  //numerotare de la 1 a atributelor
                kr.computeKernelAndWeights();
                jTextStatus.setText("DONE Building!");
                kr.isTrained=true;
                jTextStatusLoadModel.setText("Kernel regression model is loaded!");
            }catch (Exception e) {
                JOptionPane.showMessageDialog(this,"Unable to build model!","Bad input data...",JOptionPane.ERROR_MESSAGE);
                jTextStatus.setText("Build failed!");
            }

            jButtonPredict.setEnabled(kr.isTrained);
            jButtonSaveModel.setEnabled(kr.isTrained);
        }

        if (jCheckBoxBestConfiguration.isSelected()) {
            System.out.println("***Choosing the best configuration***");
            bf = new BestConfigurator();
            bf.isTrained=false;
            try{
                bf.setDataPreprocessor(dp);
                bf.initialClustering("1-4, 13-40", 2, 39);

                //bf.computeMetricsConfigurations(clusterQuery);
                bf.computeAllClusterBestConfigurations();
                //System.out.println("Best configuration is: "+bf.bestConfiguration());
                //bf.secondClusteringOnWorkflow("1-39", bf.configurations.size());
                bf.buildAllPredictors("1-39");
                jTextStatus.setText("DONE Building!");
                bf.isTrained=true;
                jTextStatusLoadModel.setText("Best configuration model is loaded!");
            }catch (Exception e){
                e.printStackTrace();
            }

            jButtonPredict.setEnabled(bf.isTrained);
            jButtonSaveModel.setEnabled(bf.isTrained);


            //            int testInstanceNo=3;
            //            int clusterQuery= bf.findClusterInstance(dp.getTransformedData(), testInstanceNo, "1-4, 13-40");
            //            System.out.println("Instanta "+testInstanceNo+" e in clusterul: "+clusterQuery);
            //            String p=bf.predictQuery(dp.getTransformedData(), testInstanceNo, "1-4, 13-40");
            //            System.out.println(p);
        }
    }//GEN-LAST:event_jButtonBuildPredictionModelActionPerformed

    private void jCheckClusteringRegressionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckClusteringRegressionItemStateChanged
        jButtonBuildPredictionModel.setEnabled(jCheckClusteringRegression.isSelected());
}//GEN-LAST:event_jCheckClusteringRegressionItemStateChanged

    private void jListAttributesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListAttributesValueChanged
        // TODO add your handling code here:
        if (dp==null) return;
        int selAttr=jListAttributes.getSelectedIndex();
        if ((selAttr<0) || (selAttr>=dp.getNoAttributes())) return;

        DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValues.getModel();
        featureTableModel.setRowCount(0);

        for (int i=0; i<dp.getNoInstances();i++) {
            Object row [] = new Object[2];
            row[0]=new Integer(i);
            row[1]=new String(dp.getStringInstanceValue(i, selAttr));

            featureTableModel.insertRow(i, row);
        }

        if (dp.isNumericAttribute(selAttr)) {
            jTextMin.setText(String.valueOf(dp.computeMinValue(selAttr)));
            jTextMax.setText(String.valueOf(dp.computeMaxValue(selAttr)));
            jTextMean.setText(String.valueOf(dp.computeMeanValue(selAttr)));
            jTextStdDev.setText(String.valueOf(dp.computeStdDevValue(selAttr)));
        } else {
            jTextMin.setText("-");
            jTextMax.setText("-");
            jTextMean.setText("-");
            jTextStdDev.setText("-");
        }
}//GEN-LAST:event_jListAttributesValueChanged

    private void jButtonChooseDataSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseDataSourceActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setFileFilter(new FileFilterExt("arff"));
        int returnVal = fc.showOpenDialog(MainFrame.this);
        dp=null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            jTextDataPath.setText(fc.getSelectedFile().getAbsolutePath());
            try{
                dp = new DataPreprocessor();
                dp.loadInitialData(jTextDataPath.getText());
                jTextNbFeatures.setText(String.valueOf(dp.getNoAttributes()));
                jTextNbInstances.setText(String.valueOf(dp.getNoInstances()));
                jListAttributes.setListData(dp.getAttrNamesList());
                jTextMin.setText("");
                jTextMax.setText("");
                jTextMean.setText("");
                jTextStdDev.setText("");
                DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValues.getModel();
                featureTableModel.setRowCount(0);
            } catch (IOException e) {
                dp=null;
                JOptionPane.showMessageDialog(this,"Please load a valid ARFF file!","Loading data error...",JOptionPane.ERROR_MESSAGE);
            }
        }
        if (dp==null) {
            jTextDataPath.setText("");
            jListAttributes.setListData(new String[] {});
            jTextNbFeatures.setText("");
            jTextNbInstances.setText("");
            jTextMin.setText("");
            jTextMax.setText("");
            jTextMean.setText("");
            jTextStdDev.setText("");
            DefaultTableModel featureTableModel = (DefaultTableModel) jTableFeatureValues.getModel();
            featureTableModel.setRowCount(0);
        }
}//GEN-LAST:event_jButtonChooseDataSourceActionPerformed
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuildPredictionModel;
    private javax.swing.JButton jButtonChooseDataSource;
    private javax.swing.JButton jButtonLoadModel;
    private javax.swing.JButton jButtonPredict;
    private javax.swing.JButton jButtonSaveModel;
    private javax.swing.JCheckBox jCheckBoxBestConfiguration;
    private javax.swing.JCheckBox jCheckClusteringRegression;
    private javax.swing.JCheckBox jCheckKCCA;
    private javax.swing.JCheckBox jCheckKernelRegression;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jListAttributes;
    private javax.swing.JPanel jLoadPanel;
    private javax.swing.JPanel jMachineLearningPanel;
    private javax.swing.JPanel jResultsPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableFeatureValues;
    private javax.swing.JTextField jTextDataPath;
    private javax.swing.JTextField jTextMax;
    private javax.swing.JTextField jTextMean;
    private javax.swing.JTextField jTextMin;
    private javax.swing.JTextField jTextNbFeatures;
    private javax.swing.JTextField jTextNbInstances;
    private javax.swing.JTextArea jTextQuery;
    private javax.swing.JTextArea jTextResults;
    private javax.swing.JTextArea jTextStatus;
    private javax.swing.JTextArea jTextStatusLoadModel;
    private javax.swing.JTextField jTextStdDev;
    private javax.swing.JTextArea jTextWorkflow;
    private javax.swing.ButtonGroup jbuttonGroup;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private DataPreprocessor dp=null;
    private RFClusteringRegression rf=null;
    private KernelRegression kr=null;
    private BestConfigurator bf=null;
}
